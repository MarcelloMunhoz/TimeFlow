// Teste para analisar dados do cron√¥metro no banco
import 'dotenv/config';

async function testTimerDataAnalysis() {
  console.log('üîç AN√ÅLISE DOS DADOS DO CRON√îMETRO NO BANCO');
  console.log('=' .repeat(60));

  const baseUrl = 'http://localhost:5000';

  try {
    // 1. Verificar se o servidor est√° rodando
    console.log('\n1Ô∏è‚É£ Verificando servidor...');
    
    try {
      const healthResponse = await fetch(baseUrl);
      console.log(`‚úÖ Servidor rodando: ${healthResponse.status}`);
    } catch (error) {
      console.log(`‚ùå Servidor n√£o est√° rodando: ${error.message}`);
      return;
    }

    // 2. Buscar agendamentos de hoje
    console.log('\n2Ô∏è‚É£ Buscando agendamentos de hoje...');
    
    const appointmentsResponse = await fetch(`${baseUrl}/api/appointments`);
    if (!appointmentsResponse.ok) {
      console.log(`‚ùå Erro ao buscar agendamentos: ${appointmentsResponse.status}`);
      return;
    }

    const appointments = await appointmentsResponse.json();
    const today = new Date().toISOString().split('T')[0];
    const todayAppointments = appointments.filter(apt => apt.date === today);
    const completedToday = todayAppointments.filter(apt => 
      apt.status === 'completed' && !apt.isPomodoro
    );

    console.log(`üìÖ Total de agendamentos: ${appointments.length}`);
    console.log(`üìÖ Agendamentos de hoje: ${todayAppointments.length}`);
    console.log(`‚úÖ Conclu√≠dos hoje (n√£o-Pomodoro): ${completedToday.length}`);

    // 3. Analisar dados detalhados dos agendamentos conclu√≠dos
    console.log('\n3Ô∏è‚É£ An√°lise detalhada dos agendamentos conclu√≠dos:');
    
    if (completedToday.length === 0) {
      console.log('‚ÑπÔ∏è Nenhum agendamento conclu√≠do hoje para an√°lise');
      return;
    }

    let totalEstimatedMinutes = 0;
    let totalActualMinutes = 0;
    let tasksWithTimer = 0;
    let tasksWithoutTimer = 0;

    console.log('\nüìã DETALHES DE CADA TAREFA:');
    console.log('-'.repeat(80));

    completedToday.forEach((apt, index) => {
      const estimated = apt.durationMinutes || 0;
      const actual = apt.actualTimeMinutes || 0;
      const accumulated = apt.accumulatedTimeMinutes || 0;
      
      totalEstimatedMinutes += estimated;
      totalActualMinutes += actual;
      
      if (actual > 0) {
        tasksWithTimer++;
      } else {
        tasksWithoutTimer++;
      }

      console.log(`\n${index + 1}. ${apt.title} (ID: ${apt.id})`);
      console.log(`   üìã Dura√ß√£o estimada: ${estimated}min`);
      console.log(`   ‚è±Ô∏è Tempo real (actualTimeMinutes): ${actual}min`);
      console.log(`   üîÑ Tempo acumulado (accumulatedTimeMinutes): ${accumulated}min`);
      console.log(`   üìä Estado do timer: ${apt.timerState || 'N/A'}`);
      console.log(`   ‚úÖ Conclu√≠do em: ${apt.completedAt || 'N/A'}`);
      console.log(`   üéØ Diferen√ßa: ${actual - estimated > 0 ? '+' : ''}${actual - estimated}min`);
      
      if (actual === 0 && estimated > 0) {
        console.log(`   ‚ö†Ô∏è PROBLEMA: Sem tempo real registrado!`);
      }
    });

    // 4. Resumo dos c√°lculos
    console.log('\n4Ô∏è‚É£ RESUMO DOS C√ÅLCULOS:');
    console.log('=' .repeat(60));
    
    console.log(`üìä ESTAT√çSTICAS GERAIS:`);
    console.log(`   üìã Total estimado: ${totalEstimatedMinutes}min`);
    console.log(`   ‚è±Ô∏è Total real: ${totalActualMinutes}min`);
    console.log(`   üìä Diferen√ßa: ${totalActualMinutes - totalEstimatedMinutes > 0 ? '+' : ''}${totalActualMinutes - totalEstimatedMinutes}min`);
    console.log(`   üéØ Tarefas com cron√¥metro: ${tasksWithTimer}`);
    console.log(`   ‚ö†Ô∏è Tarefas sem cron√¥metro: ${tasksWithoutTimer}`);

    // Converter para formato h/min
    const formatMinutes = (minutes) => {
      if (minutes === 0) return "0min";
      const hours = Math.floor(minutes / 60);
      const mins = minutes % 60;
      if (hours === 0) return `${mins}min`;
      if (mins === 0) return `${hours}h`;
      return `${hours}h${mins}min`;
    };

    console.log(`\nüìè FORMATA√á√ÉO:`);
    console.log(`   üìã Total estimado: ${formatMinutes(totalEstimatedMinutes)}`);
    console.log(`   ‚è±Ô∏è Total real: ${formatMinutes(totalActualMinutes)}`);

    // 5. Testar API de estat√≠sticas
    console.log('\n5Ô∏è‚É£ Testando API de estat√≠sticas...');
    
    const statsResponse = await fetch(`${baseUrl}/api/stats/productivity`);
    if (statsResponse.ok) {
      const stats = await statsResponse.json();
      console.log(`‚úÖ API retornou: "${stats.scheduledHoursToday}"`);
      console.log(`üîç Tipo: ${typeof stats.scheduledHoursToday}`);
      
      // Comparar com nosso c√°lculo
      const expectedResult = formatMinutes(totalActualMinutes);
      const isCorrect = stats.scheduledHoursToday === expectedResult;
      
      console.log(`\nüìä COMPARA√á√ÉO:`);
      console.log(`   üéØ Esperado: ${expectedResult}`);
      console.log(`   üì° API retornou: ${stats.scheduledHoursToday}`);
      console.log(`   ‚úÖ Correto: ${isCorrect ? 'SIM' : 'N√ÉO'}`);
      
      if (!isCorrect) {
        console.log(`\n‚ùå PROBLEMA IDENTIFICADO:`);
        console.log(`   A API n√£o est√° retornando o valor correto!`);
        console.log(`   Poss√≠veis causas:`);
        console.log(`   - Campo actualTimeMinutes n√£o est√° sendo populado`);
        console.log(`   - L√≥gica de c√°lculo incorreta`);
        console.log(`   - Cache ou dados n√£o atualizados`);
      }
      
    } else {
      console.log(`‚ùå Erro ao buscar estat√≠sticas: ${statsResponse.status}`);
    }

    // 6. Verificar tarefas espec√≠ficas mencionadas pelo usu√°rio
    console.log('\n6Ô∏è‚É£ Verificando tarefas espec√≠ficas mencionadas...');
    
    const timerIds = [44, 390, 396, 617, 618];
    const expectedTimes = {
      44: '8h15m',
      390: '8h1m', 
      396: '8h27m',
      617: '6h54m',
      618: '7h4m'
    };

    console.log('\nüîç BUSCANDO TAREFAS COM TIMER IDs ESPEC√çFICOS:');
    
    timerIds.forEach(timerId => {
      const task = appointments.find(apt => 
        apt.id === timerId || 
        apt.title?.includes(`Timer ID: ${timerId}`) ||
        apt.description?.includes(`Timer ID: ${timerId}`)
      );
      
      if (task) {
        console.log(`\n‚úÖ Timer ID ${timerId} encontrado:`);
        console.log(`   üìã T√≠tulo: ${task.title}`);
        console.log(`   ‚è±Ô∏è actualTimeMinutes: ${task.actualTimeMinutes || 0}min`);
        console.log(`   üîÑ accumulatedTimeMinutes: ${task.accumulatedTimeMinutes || 0}min`);
        console.log(`   üìä Status: ${task.status}`);
        console.log(`   üéØ Esperado: ${expectedTimes[timerId]}`);
        
        const actualMinutes = task.actualTimeMinutes || 0;
        const expectedMinutes = timerId === 44 ? 495 : // 8h15m
                               timerId === 390 ? 481 : // 8h1m
                               timerId === 396 ? 507 : // 8h27m
                               timerId === 617 ? 414 : // 6h54m
                               timerId === 618 ? 424 : 0; // 7h4m
        
        const isCorrect = actualMinutes === expectedMinutes;
        console.log(`   ‚úÖ Tempo correto: ${isCorrect ? 'SIM' : 'N√ÉO'} (${actualMinutes}min vs ${expectedMinutes}min)`);
        
      } else {
        console.log(`‚ùå Timer ID ${timerId} n√£o encontrado`);
      }
    });

    // 7. Resumo final
    console.log('\nüéØ RESUMO FINAL');
    console.log('=' .repeat(60));
    
    if (totalActualMinutes === 0 && totalEstimatedMinutes > 0) {
      console.log('‚ùå PROBLEMA CR√çTICO IDENTIFICADO:');
      console.log('   - Nenhuma tarefa tem actualTimeMinutes > 0');
      console.log('   - O cron√¥metro n√£o est√° salvando os dados corretamente');
      console.log('   - API est√° usando apenas durationMinutes (estimado)');
    } else if (totalActualMinutes > 0) {
      console.log('‚úÖ DADOS DO CRON√îMETRO ENCONTRADOS:');
      console.log(`   - ${tasksWithTimer} tarefas com tempo real registrado`);
      console.log(`   - ${formatMinutes(totalActualMinutes)} de tempo real trabalhado`);
      console.log(`   - API deveria mostrar: ${formatMinutes(totalActualMinutes)}`);
    }

    console.log('\nüîß PR√ìXIMOS PASSOS:');
    if (totalActualMinutes === 0) {
      console.log('   1. Verificar se o cron√¥metro est√° salvando actualTimeMinutes');
      console.log('   2. Verificar se as tarefas foram conclu√≠das via cron√¥metro');
      console.log('   3. Verificar se h√° problemas na migra√ß√£o do banco');
    } else {
      console.log('   1. Verificar se a API est√° usando o campo correto');
      console.log('   2. Verificar se h√° cache ou dados n√£o atualizados');
      console.log('   3. Testar com uma nova tarefa usando cron√¥metro');
    }

    console.log('\nüéâ AN√ÅLISE CONCLU√çDA!');

  } catch (error) {
    console.error('\n‚ùå ERRO DURANTE AN√ÅLISE:', error);
  }
}

// Executar an√°lise
testTimerDataAnalysis().catch(console.error);
