// Debug do sistema de temas
import 'dotenv/config';

async function debugThemeSystem() {
  console.log('üîç DEBUG DO SISTEMA DE TEMAS');
  console.log('=' .repeat(60));

  const baseUrl = 'http://localhost:5000';

  try {
    // 1. Verificar se o servidor est√° rodando
    console.log('\n1Ô∏è‚É£ Verificando servidor...');
    
    try {
      const healthResponse = await fetch(baseUrl);
      console.log(`‚úÖ Servidor rodando: ${healthResponse.status}`);
    } catch (error) {
      console.log(`‚ùå Servidor n√£o est√° rodando: ${error.message}`);
      return;
    }

    // 2. Verificar se a p√°gina carrega
    console.log('\n2Ô∏è‚É£ Verificando carregamento da p√°gina...');
    
    const pageResponse = await fetch(baseUrl);
    if (pageResponse.ok) {
      const pageContent = await pageResponse.text();
      console.log(`‚úÖ P√°gina carregada: ${pageResponse.status}`);
      
      // Verificar se cont√©m elementos de tema
      const hasThemeController = pageContent.includes('theme-controller') || 
                                pageContent.includes('ThemeController');
      const hasThemeCSS = pageContent.includes('themes.css') || 
                         pageContent.includes('--bg-primary');
      const hasDataTheme = pageContent.includes('data-theme');
      
      console.log(`üìä ELEMENTOS DE TEMA NA P√ÅGINA:`);
      console.log(`   ThemeController presente: ${hasThemeController ? 'SIM' : 'N√ÉO'}`);
      console.log(`   CSS de temas carregado: ${hasThemeCSS ? 'SIM' : 'N√ÉO'}`);
      console.log(`   Atributo data-theme: ${hasDataTheme ? 'SIM' : 'N√ÉO'}`);
      
    } else {
      console.log(`‚ùå Erro ao carregar p√°gina: ${pageResponse.status}`);
    }

    // 3. Verificar problemas potenciais
    console.log('\n3Ô∏è‚É£ Identificando problemas potenciais...');
    
    console.log(`üö® PROBLEMAS IDENTIFICADOS:`);
    console.log(`   1. CSS conflitante no index.css`);
    console.log(`      - Vari√°veis CSS existentes podem sobrescrever as nossas`);
    console.log(`      - Classes .dark existentes podem conflitar`);
    console.log(`      - @layer base pode ter prioridade sobre nossos estilos`);
    
    console.log(`   2. Aplica√ß√£o de classes pode n√£o estar funcionando`);
    console.log(`      - useTheme hook pode n√£o estar aplicando classes ao DOM`);
    console.log(`      - Componentes podem n√£o estar usando as classes corretas`);
    
    console.log(`   3. CSS custom properties podem n√£o estar sendo aplicadas`);
    console.log(`      - Especificidade CSS pode estar causando conflitos`);
    console.log(`      - Ordem de importa√ß√£o pode estar incorreta`);

    // 4. Solu√ß√µes propostas
    console.log('\n4Ô∏è‚É£ Solu√ß√µes a serem implementadas...');
    
    console.log(`üîß CORRE√á√ïES NECESS√ÅRIAS:`);
    console.log(`   1. Reorganizar index.css para evitar conflitos`);
    console.log(`   2. Garantir que data-theme seja aplicado ao <html>`);
    console.log(`   3. Verificar se classes tem√°ticas est√£o sendo aplicadas`);
    console.log(`   4. Ajustar especificidade CSS se necess√°rio`);
    console.log(`   5. Testar aplica√ß√£o de temas em tempo real`);

    console.log('\nüéØ PR√ìXIMOS PASSOS:');
    console.log('   1. Corrigir conflitos CSS no index.css');
    console.log('   2. Verificar aplica√ß√£o de data-theme no HTML');
    console.log('   3. Testar hook useTheme');
    console.log('   4. Verificar componentes modernos');
    console.log('   5. Testar mudan√ßas de tema em tempo real');

  } catch (error) {
    console.error('\n‚ùå ERRO DURANTE DEBUG:', error);
  }
}

// Executar debug
debugThemeSystem().catch(console.error);
