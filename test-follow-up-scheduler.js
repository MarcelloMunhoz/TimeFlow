// Testar o sistema de agendamento de follow-up
import 'dotenv/config';
import { followUpScheduler } from './server/services/follow-up-scheduler.ts';
import { storage } from './server/storage.ts';

async function testFollowUpScheduler() {
  console.log('üß™ Testando sistema de agendamento de follow-up...\n');

  try {
    // 1. Inicializar o scheduler
    console.log('1Ô∏è‚É£ Inicializando scheduler...');
    await followUpScheduler.initialize();
    console.log('‚úÖ Scheduler inicializado com sucesso');

    // 2. Verificar status do scheduler
    console.log('\n2Ô∏è‚É£ Verificando status do scheduler...');
    const status = followUpScheduler.getStatus();
    console.log('‚úÖ Status do scheduler:');
    console.log(`   - Executando: ${status.isRunning}`);
    console.log(`   - Total de relat√≥rios enviados: ${status.totalReportsSent}`);
    console.log(`   - Total de erros: ${status.totalErrors}`);
    console.log(`   - Jobs agendados: ${status.scheduledJobs.length}`);
    
    if (status.scheduledJobs.length > 0) {
      console.log('\nüìã Jobs agendados:');
      status.scheduledJobs.forEach(job => {
        console.log(`   - ${job.companyName} (ID: ${job.companyId})`);
        console.log(`     Schedule: ${job.schedule}`);
        console.log(`     Status: ${job.status}`);
        console.log(`     Enabled: ${job.enabled}`);
      });
    }

    // 3. Listar empresas com configura√ß√µes de follow-up
    console.log('\n3Ô∏è‚É£ Verificando configura√ß√µes de follow-up...');
    const followUpSettings = await storage.getAllFollowUpSettings();
    console.log(`‚úÖ Encontradas ${followUpSettings.length} configura√ß√µes:`);
    
    followUpSettings.forEach(setting => {
      console.log(`   - ${setting.companyName}: ${setting.enabled ? 'Ativo' : 'Inativo'}`);
      console.log(`     Frequ√™ncia: ${setting.emailFrequency}`);
      console.log(`     Dia: ${setting.sendDay} √†s ${setting.sendTime}`);
      console.log(`     Emails: ${setting.recipientEmails ? 'Configurado' : 'N√£o configurado'}`);
    });

    // 4. Testar execu√ß√£o manual de um job
    if (followUpSettings.length > 0) {
      const testCompany = followUpSettings.find(s => s.enabled);
      
      if (testCompany) {
        console.log(`\n4Ô∏è‚É£ Testando execu√ß√£o manual para ${testCompany.companyName}...`);
        
        const result = await followUpScheduler.triggerManualJob(testCompany.companyId);
        
        if (result.success) {
          console.log('‚úÖ Job manual executado com sucesso');
        } else {
          console.log('‚ùå Falha na execu√ß√£o manual:', result.error);
        }
      } else {
        console.log('\n4Ô∏è‚É£ Nenhuma empresa habilitada para teste manual');
      }
    }

    // 5. Testar recarregamento de jobs
    console.log('\n5Ô∏è‚É£ Testando recarregamento de jobs...');
    await followUpScheduler.reloadJobs();
    console.log('‚úÖ Jobs recarregados com sucesso');

    // 6. Verificar status ap√≥s recarregamento
    console.log('\n6Ô∏è‚É£ Status ap√≥s recarregamento...');
    const newStatus = followUpScheduler.getStatus();
    console.log(`‚úÖ Jobs ativos: ${newStatus.scheduledJobs.length}`);

    // 7. Configurar uma empresa para teste (se n√£o houver emails configurados)
    console.log('\n7Ô∏è‚É£ Configurando empresa para teste...');
    const testCompanySettings = followUpSettings[0];
    
    if (testCompanySettings && !testCompanySettings.recipientEmails) {
      console.log(`üìß Configurando emails de teste para ${testCompanySettings.companyName}...`);
      
      await storage.updateFollowUpSettings(testCompanySettings.companyId, {
        recipientEmails: '["test@timeflow.com", "admin@timeflow.com"]',
        enabled: true
      });
      
      console.log('‚úÖ Emails de teste configurados');
    }

    // 8. Demonstrar diferentes tipos de agendamento
    console.log('\n8Ô∏è‚É£ Exemplos de agendamento:');
    console.log('   - Semanal (Segunda √†s 8h): 0 8 * * 1');
    console.log('   - Quinzenal (Sexta √†s 14h): 0 14 * * 5');
    console.log('   - Mensal (Primeira segunda √†s 9h): 0 9 1-7 * 1');
    
    // 9. Simular pr√≥ximas execu√ß√µes
    console.log('\n9Ô∏è‚É£ Pr√≥ximas execu√ß√µes simuladas:');
    const now = new Date();
    const nextMonday = new Date(now);
    nextMonday.setDate(now.getDate() + (1 + 7 - now.getDay()) % 7);
    nextMonday.setHours(8, 0, 0, 0);
    
    console.log(`   - Pr√≥xima segunda-feira √†s 8h: ${nextMonday.toLocaleString('pt-BR')}`);

    console.log('\nüéâ Todos os testes do scheduler passaram!');
    console.log('üí° O scheduler est√° funcionando e executar√° automaticamente:');
    console.log('   - Jobs agendados conforme configura√ß√£o de cada empresa');
    console.log('   - Verifica√ß√£o di√°ria de mudan√ßas de configura√ß√£o √†s 6h');
    console.log('   - Gera√ß√£o e envio autom√°tico de relat√≥rios');

    // 10. Parar o scheduler para n√£o interferir com outros testes
    console.log('\nüõë Parando scheduler para finalizar teste...');
    followUpScheduler.stopAllJobs();
    console.log('‚úÖ Scheduler parado');

  } catch (error) {
    console.error('‚ùå Erro durante teste do scheduler:', error);
  }
}

// Executar teste
testFollowUpScheduler().catch(console.error);
