// Debug da exclus√£o de fases
import 'dotenv/config';
import { db } from './server/db.ts';

async function debugPhaseDeletion() {
  console.log('üîç DEBUG DA EXCLUS√ÉO DE FASES');
  console.log('=' .repeat(50));

  const phaseId = 1082;

  try {
    // 1. Verificar se a fase existe
    console.log(`\n1Ô∏è‚É£ Verificando se a fase ${phaseId} existe...`);
    const phaseExists = await db.execute(`SELECT * FROM phases WHERE id = ${phaseId}`);
    
    if (phaseExists.rows.length === 0) {
      console.log(`‚ùå Fase ${phaseId} N√ÉO EXISTE no banco de dados`);
      
      // Listar fases existentes
      console.log('\nüìã Fases existentes:');
      const allPhases = await db.execute('SELECT id, name FROM phases ORDER BY id DESC LIMIT 10');
      allPhases.rows.forEach(phase => {
        console.log(`   - ID: ${phase.id}, Nome: ${phase.name}`);
      });
      
      return;
    }
    
    const phase = phaseExists.rows[0];
    console.log(`‚úÖ Fase encontrada: ${phase.name} (ID: ${phase.id})`);

    // 2. Verificar subphases
    console.log(`\n2Ô∏è‚É£ Verificando subphases da fase ${phaseId}...`);
    const subphases = await db.execute(`SELECT * FROM subphases WHERE phase_id = ${phaseId}`);
    
    if (subphases.rows.length > 0) {
      console.log(`‚ùå Fase tem ${subphases.rows.length} subphases:`);
      subphases.rows.forEach(sub => {
        console.log(`   - ID: ${sub.id}, Nome: ${sub.name}`);
      });
    } else {
      console.log('‚úÖ Fase n√£o tem subphases');
    }

    // 3. Verificar project_phases
    console.log(`\n3Ô∏è‚É£ Verificando project_phases da fase ${phaseId}...`);
    const projectPhases = await db.execute(`
      SELECT pp.*, p.name as project_name 
      FROM project_phases pp 
      LEFT JOIN projects p ON pp.project_id = p.id 
      WHERE pp.phase_id = ${phaseId}
    `);
    
    if (projectPhases.rows.length > 0) {
      console.log(`‚ùå Fase est√° associada a ${projectPhases.rows.length} projetos:`);
      projectPhases.rows.forEach(pp => {
        console.log(`   - Projeto: ${pp.project_name} (ID: ${pp.project_id})`);
      });
    } else {
      console.log('‚úÖ Fase n√£o est√° associada a projetos');
    }

    // 4. Verificar appointments
    console.log(`\n4Ô∏è‚É£ Verificando appointments da fase ${phaseId}...`);
    const appointments = await db.execute(`SELECT * FROM appointments WHERE phase_id = ${phaseId}`);
    
    if (appointments.rows.length > 0) {
      console.log(`‚ùå Fase est√° associada a ${appointments.rows.length} appointments:`);
      appointments.rows.forEach(apt => {
        console.log(`   - Appointment ID: ${apt.id}, T√≠tulo: ${apt.title}`);
      });
    } else {
      console.log('‚úÖ Fase n√£o est√° associada a appointments');
    }

    // 5. Verificar project_subphases
    console.log(`\n5Ô∏è‚É£ Verificando project_subphases da fase ${phaseId}...`);
    const projectSubphases = await db.execute(`
      SELECT ps.*, s.name as subphase_name, p.name as project_name
      FROM project_subphases ps
      LEFT JOIN subphases s ON ps.subphase_id = s.id
      LEFT JOIN projects p ON ps.project_id = p.id
      WHERE s.phase_id = ${phaseId}
    `);
    
    if (projectSubphases.rows.length > 0) {
      console.log(`‚ùå Fase tem subphases associadas a ${projectSubphases.rows.length} projetos:`);
      projectSubphases.rows.forEach(ps => {
        console.log(`   - Projeto: ${ps.project_name}, Subphase: ${ps.subphase_name}`);
      });
    } else {
      console.log('‚úÖ Subphases da fase n√£o est√£o associadas a projetos');
    }

    // 6. Resumo
    console.log(`\nüìä RESUMO PARA FASE ${phaseId}:`);
    console.log(`   - Existe: ${phaseExists.rows.length > 0 ? 'SIM' : 'N√ÉO'}`);
    console.log(`   - Subphases: ${subphases.rows.length}`);
    console.log(`   - Projetos associados: ${projectPhases.rows.length}`);
    console.log(`   - Appointments: ${appointments.rows.length}`);
    console.log(`   - Project subphases: ${projectSubphases.rows.length}`);

    const canDelete = phaseExists.rows.length > 0 && 
                     subphases.rows.length === 0 && 
                     projectPhases.rows.length === 0 && 
                     appointments.rows.length === 0 &&
                     projectSubphases.rows.length === 0;

    console.log(`\nüéØ PODE DELETAR: ${canDelete ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);

    if (!canDelete) {
      console.log('\nüí° PARA DELETAR A FASE:');
      if (subphases.rows.length > 0) {
        console.log('   1. Delete todas as subphases primeiro');
      }
      if (projectPhases.rows.length > 0) {
        console.log('   2. Remova a fase dos projetos');
      }
      if (appointments.rows.length > 0) {
        console.log('   3. Remova a fase dos appointments');
      }
      if (projectSubphases.rows.length > 0) {
        console.log('   4. Remova as subphases dos projetos');
      }
      console.log('   5. Ou use force delete: DELETE /api/phases/:id/force');
    }

    // 7. Testar API diretamente
    console.log(`\nüß™ TESTANDO API DIRETAMENTE...`);
    
    try {
      const response = await fetch(`http://localhost:5000/api/phases/${phaseId}`, {
        method: 'DELETE'
      });
      
      console.log(`   Status: ${response.status}`);
      
      if (response.ok) {
        const result = await response.json();
        console.log(`   ‚úÖ Sucesso: ${result.message}`);
      } else {
        const error = await response.json();
        console.log(`   ‚ùå Erro: ${error.message}`);
      }
    } catch (error) {
      console.log(`   ‚ùå Erro na requisi√ß√£o: ${error.message}`);
    }

  } catch (error) {
    console.error('\n‚ùå ERRO DURANTE DEBUG:', error);
  }
}

// Executar debug
debugPhaseDeletion().catch(console.error);
